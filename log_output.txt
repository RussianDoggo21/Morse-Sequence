Début du main
MorseSequence créée



Séquence de Morse croissante

std.size() init :0
S.size() updated 1 : 1
Entrée dans la boucle while L
{ 1 8 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 1 3 8 }
{ 1 4 8 }
S : 
{ 1 }
S.size() updated 2 : 1
v_opt contient une valeur
v = { 8 }
tau ={ 8 }
Entrée dans la boucle while L
{ 1 4 8 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 1 3 8 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 1 8 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 3 8 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 3 6 8 }
{ 1 3 8 }
S : 
{ 1 }
{ 8 }
{ 1 8 }
S.size() updated 2 : 3
v_opt contient une valeur
v = { 3 }
tau ={ 3 }
Entrée dans la boucle while L
{ 1 3 8 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 3 }
{ 8 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 5
v_opt contient une valeur
v = { 1 3 }
tau ={ 1 3 }
Entrée dans la boucle while L
{ 1 3 8 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 1 3 5 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 3 6 8 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 2 3 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 2 3 6 }
{ 2 3 9 }
S : 
{ 1 }
{ 3 }
{ 1 3 }
{ 8 }
{ 1 3 8 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 7
v_opt contient une valeur
v = { 2 }
tau ={ 2 }
Entrée dans la boucle while L
{ 2 3 9 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 2 3 6 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 2 9 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 2 7 9 }
{ 2 3 9 }
S : 
{ 1 }
{ 2 }
{ 3 }
{ 2 3 }
{ 1 3 }
{ 8 }
{ 1 3 8 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 9
v_opt contient une valeur
v = { 9 }
tau ={ 9 }
Entrée dans la boucle while L
{ 2 3 9 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 1 3 }
{ 8 }
{ 1 3 8 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 11
v_opt contient une valeur
v = { 3 9 }
tau ={ 3 9 }
Entrée dans la boucle while L
{ 3 5 9 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 2 3 9 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 2 7 9 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 4 9 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 4 8 9 }
{ 4 5 9 }
S : 
{ 1 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 1 3 }
{ 8 }
{ 1 3 8 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 13
v_opt contient une valeur
v = { 4 }
tau ={ 4 }
Entrée dans la boucle while L
{ 4 5 9 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 4 8 9 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 4 9 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 4 6 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 4 5 6 }
{ 2 4 6 }
S : 
{ 1 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 1 3 }
{ 4 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 15
v_opt contient une valeur
v = { 6 }
tau ={ 6 }
Entrée dans la boucle while L
{ 2 4 6 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 4 5 6 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 5 6 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 5 6 7 }
{ 4 5 6 }
S : 
{ 1 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 1 3 }
{ 4 }
{ 6 }
{ 4 6 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 17
v_opt contient une valeur
v = { 5 }
tau ={ 5 }
Entrée dans la boucle while L
{ 4 5 6 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 1 3 }
{ 4 }
{ 6 }
{ 4 6 }
{ 5 6 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 19
v_opt contient une valeur
v = { 4 5 }
tau ={ 4 5 }
Entrée dans la boucle while L
{ 4 5 9 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 1 3 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 21
v_opt contient une valeur
v = { 5 9 }
tau ={ 5 9 }
Entrée dans la boucle while L
{ 4 5 9 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 3 5 9 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 23
v_opt contient une valeur
v = { 3 5 }
tau ={ 3 5 }
Entrée dans la boucle while L
{ 1 3 5 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 2 9 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 25
v_opt contient une valeur
v = { 1 5 }
tau ={ 1 5 }
Entrée dans la boucle while L
{ 1 3 5 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 1 5 7 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 3 5 9 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 4 5 6 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 5 6 7 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 5 7 }
ro[tau] : 1
dim of tau : 1
Entrée dans le if Coboundary de tau : 
{ 1 5 7 }
{ 5 6 7 }
S : 
{ 1 }
{ 5 }
{ 2 9 }
{ 1 5 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 27
v_opt contient une valeur
v = { 7 }
tau ={ 7 }
Entrée dans la boucle while L
{ 5 6 7 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 5 7 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 29
v_opt contient une valeur
v = { 6 7 }
tau ={ 6 7 }
Entrée dans la boucle while L
{ 5 6 7 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 6 7 8 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 1 5 7 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 5 7 }
{ 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 31
v_opt contient une valeur
v = { 1 7 }
tau ={ 1 7 }
Entrée dans la boucle while L
{ 1 2 7 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 1 5 7 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 5 7 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 5 6 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 4 6 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 6 7 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 4 5 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 5 9 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 7 9 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 2 9 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 2 7 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 2 6 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 2 4 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 2 3 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 3 9 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 3 8 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 3 6 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 3 5 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 4 8 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 7 8 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 6 8 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 8 9 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 1 7 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 1 5 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 1 4 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 1 3 }
ro[tau] : 2
dim of tau : 1
Entrée dans la boucle while L
{ 1 2 }
ro[tau] : 2
dim of tau : 1
S.size() updated 1 : 34
Entrée dans la boucle while L
{ 1 2 7 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 34
v_opt contient une valeur
v = { 2 7 }
tau ={ 2 7 }
Entrée dans la boucle while L
{ 1 2 7 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 2 7 9 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 36
v_opt contient une valeur
v = { 7 9 }
tau ={ 7 9 }
Entrée dans la boucle while L
{ 7 8 9 }
ro[tau] : 1
dim of tau : 2
Entrée dans la boucle while L
{ 2 7 9 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 1 2 4 }
ro[tau] : 1
dim of tau : 2
S.size() updated 1 : 39
S.size() updated 1 : 40
Entrée dans la boucle while L
{ 1 2 4 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 4 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 2 7 9 }
{ 7 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 1 4 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 40
v_opt contient une valeur
v = { 2 4 }
tau ={ 2 4 }
Entrée dans la boucle while L
{ 1 2 4 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 2 4 6 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 4 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 2 7 9 }
{ 7 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 1 4 }
{ 2 4 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 41
v_opt contient une valeur
v = { 2 6 }
tau ={ 2 6 }
Entrée dans la boucle while L
{ 2 3 6 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 4 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 2 7 9 }
{ 7 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 1 4 }
{ 2 4 }
{ 2 6 }
{ 2 4 6 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 43
v_opt contient une valeur
v = { 3 6 }
tau ={ 3 6 }
Entrée dans la boucle while L
{ 2 3 6 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 3 6 8 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 4 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 2 7 9 }
{ 7 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 1 3 8 }
{ 4 9 }
{ 1 4 }
{ 2 4 }
{ 2 6 }
{ 2 4 6 }
{ 2 3 6 }
{ 3 6 }
{ 3 8 }
{ 1 8 }
S.size() updated 2 : 45
v_opt contient une valeur
v = { 6 8 }
tau ={ 6 8 }
Entrée dans la boucle while L
{ 3 6 8 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 6 7 8 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 4 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 2 7 9 }
{ 7 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 6 8 }
{ 1 3 8 }
{ 4 9 }
{ 1 4 }
{ 2 4 }
{ 2 6 }
{ 2 4 6 }
{ 2 3 6 }
{ 3 6 }
{ 3 8 }
{ 3 6 8 }
{ 1 8 }
S.size() updated 2 : 47
v_opt contient une valeur
v = { 7 8 }
tau ={ 7 8 }
Entrée dans la boucle while L
{ 6 7 8 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 7 8 9 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 4 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 2 7 9 }
{ 7 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 6 8 }
{ 6 7 8 }
{ 7 8 }
{ 1 3 8 }
{ 4 9 }
{ 1 4 }
{ 2 4 }
{ 2 6 }
{ 2 4 6 }
{ 2 3 6 }
{ 3 6 }
{ 3 8 }
{ 3 6 8 }
{ 1 8 }
S.size() updated 2 : 49
v_opt contient une valeur
v = { 8 9 }
tau ={ 8 9 }
Entrée dans la boucle while L
{ 4 8 9 }
ro[tau] : 2
dim of tau : 2
Entrée dans le if Coboundary de tau : 
S : 
{ 1 }
{ 5 }
{ 7 }
{ 2 9 }
{ 1 5 }
{ 1 7 }
{ 1 5 7 }
{ 5 7 }
{ 2 }
{ 1 2 }
{ 1 2 4 }
{ 1 2 7 }
{ 2 7 }
{ 9 }
{ 2 7 9 }
{ 7 9 }
{ 3 }
{ 2 3 }
{ 2 3 9 }
{ 3 9 }
{ 3 5 }
{ 3 5 9 }
{ 4 5 9 }
{ 5 9 }
{ 1 3 }
{ 1 3 5 }
{ 4 }
{ 6 }
{ 4 5 }
{ 4 6 }
{ 4 5 6 }
{ 5 6 }
{ 5 6 7 }
{ 6 7 }
{ 8 }
{ 6 8 }
{ 6 7 8 }
{ 7 8 }
{ 7 8 9 }
{ 8 9 }
{ 1 3 8 }
{ 4 9 }
{ 1 4 }
{ 2 4 }
{ 2 6 }
{ 2 4 6 }
{ 2 3 6 }
{ 3 6 }
{ 3 8 }
{ 3 6 8 }
{ 1 8 }
S.size() updated 2 : 51
v_opt contient une valeur
v = { 4 8 }
tau ={ 4 8 }
Entrée dans la boucle while L
{ 4 8 9 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 7 8 9 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 2 4 6 }
ro[tau] : 3
dim of tau : 2
Entrée dans la boucle while L
{ 1 4 8 }
ro[tau] : 3
dim of tau : 2
S.size() updated 1 : 54
Number of critical points: 5
{ 1 }
Pair of simplexes: { 8 }
and { 1 8 }

Pair of simplexes: { 3 }
and { 3 8 }

Pair of simplexes: { 1 3 }
and { 1 3 8 }

Pair of simplexes: { 2 }
and { 2 3 }

Pair of simplexes: { 9 }
and { 2 9 }

Pair of simplexes: { 3 9 }
and { 2 3 9 }

Pair of simplexes: { 4 }
and { 4 9 }

Pair of simplexes: { 6 }
and { 4 6 }

Pair of simplexes: { 5 }
and { 5 6 }

Pair of simplexes: { 4 5 }
and { 4 5 6 }

Pair of simplexes: { 5 9 }
and { 4 5 9 }

Pair of simplexes: { 3 5 }
and { 3 5 9 }

Pair of simplexes: { 1 5 }
and { 1 3 5 }

Pair of simplexes: { 7 }
and { 5 7 }

Pair of simplexes: { 6 7 }
and { 5 6 7 }

Pair of simplexes: { 1 7 }
and { 1 5 7 }

{ 1 2 }
Pair of simplexes: { 2 7 }
and { 1 2 7 }

Pair of simplexes: { 7 9 }
and { 2 7 9 }

{ 1 2 4 }
{ 1 4 }
Pair of simplexes: { 2 4 }
and { 1 2 4 }

Pair of simplexes: { 2 6 }
and { 2 4 6 }

Pair of simplexes: { 3 6 }
and { 2 3 6 }

Pair of simplexes: { 6 8 }
and { 3 6 8 }

Pair of simplexes: { 7 8 }
and { 6 7 8 }

Pair of simplexes: { 8 9 }
and { 7 8 9 }

Pair of simplexes: { 4 8 }
and { 4 8 9 }

{ 1 4 8 }



Fin du main
