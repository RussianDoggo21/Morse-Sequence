==========================================================================================================================================================================
HOW TO MAKE THE LIBRARY AVAILABLE VIA pip install morse-sequence
==========================================================================================================================================================================

Step 1: Make Changes to Your Code
Update Your Code: Make the necessary changes to your codebase. This could include bug fixes, new features, or improvements.

Update Documentation: Ensure that any relevant documentation is updated to reflect the changes you've made. 
This includes updating the README.md file, docstrings, and any other documentation.

Step 2: Update the Version Number
Versioning: Increment the version number in your pyproject.toml, setup.py and setup.cfg files. 
Follow semantic versioning (e.g., 0.1.0 to 0.1.1 for a patch, 0.2.0 for a minor update, or 1.0.0 for a major update).

rm -rf dist build

Build the Package: Build the updated package using the following command:
python setup.py sdist bdist_wheel

Step 4: Test the Updated Package Locally
Install Locally: Install the updated package locally to test it.
pip install -e .

Run Tests: Run any tests you have to ensure that the changes work as expected.

Step 5: Upload the Updated Package to PyPI
Upload with Twine: Use twine to upload the updated package to PyPI.
python -m twine upload --username __token__ --password token_to_replace dist/*


Step 6: Verify the Upload
Check PyPI: Go to your package's page on PyPI to ensure that the new version is available.

Install the Updated Package: Install the updated package in a clean environment to verify that it works as expected.
pip install morse-sequence==0.1.1

==========================================================================================================================================================================
HOW TO BUILD AND INSTALL MORSE-SEQUENCE LOCALLY
==========================================================================================================================================================================
Step 1 : 
Go to the racine of the project ~/Téléchargements/Morse-Sequence

Step 2 : 
Update your files if necessary
- bindings.cpp for exposing C++ code to python
- pyproject.toml to modify the number of the version
- meson.build to modify the number of the version

Step 3: 
./build_install.sh


==========================================================================================================================================================================
HOW TO PROFILE A BINARY
==========================================================================================================================================================================

Step 1 : 
cd ~/Téléchargements/Morse-Sequence/tests/cpp_tests
cd ~/Téléchargements/Morse-Sequence/tests/python_tests

Step 2 : 
Update your Makefile if necessary (pour les fichiers .cpp)

Step 3 : 
Create your binary (make or make test_XXX) (pour les fichiers .cpp)

Step 4 : 
sudo sysctl kernel.perf_event_paranoid=1 

perf record --call-graph=dwarf -F 100 ./test_XXX 100 2000 (pour les fichiers .cpp)
perf record -F 100 -g --call-graph=dwarf -- python3 -m tests.python_tests.XXX 100 200 (pour les fichiers .py)

Step 5 : 
perf report

==========================================================================================================================================================================
PROBLEME A RESOUDRE ACTUELLEMENT
==========================================================================================================================================================================

1) Utiliser Union Find pour la reference map :
    OBJECTIF : Classes d'équivalence sur les bitarrays (ex : classe 0000, classe 0010...)
3) Fonctions print_m_sequence et print_m_frame exposées via pybind ou gérées directement en python ?
4) Lire papier Bertrand
5) Implémenter persistance et calcul nombre Betti (voir frames.py de gitlab esiee)
6) Rapport : Ecrire de telle sorte que M.Cousty puisse comprendre le papier 
(partie intéressante : difficultés que j'ai rencontrées, travail que j'ai effectué)
(je connaissais pas C++, j'ai utilisé Chat GPT : comment ?)
(Quelles étaient les raisons de mes choix ?)
RACONTER UNE HISTOIRE DANS LE RAPPORT !! Objectif, problème, comment régler le problème

==========================================================================================================================================================================
PROBLEMES SECONDAIRES
==========================================================================================================================================================================

- Supprimer les chemins absolus dans timer.py et timer_m_sequence.cpp
- Vérifier les unités (secondes, millisecondes ?) affichées dans les plots