cc   test_bindings.o   -o test_bindings
lto-wrapper: warning: using serial compilation of 3 LTRANS jobs
lto-wrapper: note: see the ‘-flto’ option documentation for more information
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_static_get » :
<artificial>:(.text+0x3) : référence indéfinie vers « PyProperty_Type »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_static_set » :
<artificial>:(.text+0x2a) : référence indéfinie vers « PyProperty_Type »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cast_error::~cast_error() » :
<artificial>:(.text+0x5f) : référence indéfinie vers « std::runtime_error::~runtime_error() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cast_error::set_error() const » :
<artificial>:(.text+0x85) : référence indéfinie vers « PyExc_RuntimeError »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::bad_variant_access::~bad_variant_access() » :
<artificial>:(.text+0xbf) : référence indéfinie vers « std::exception::~exception() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::~error_already_set() [clone .lto_priv.0] » :
<artificial>:(.text+0x178) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::~error_already_set() » :
<artificial>:(.text+0x205) : référence indéfinie vers « std::exception::~exception() »
/usr/bin/ld : <artificial>:(.text+0x260) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_meta_getattro » :
<artificial>:(.text+0x2ad) : référence indéfinie vers « _PyType_Lookup »
/usr/bin/ld : <artificial>:(.text+0x2b9) : référence indéfinie vers « PyInstanceMethod_Type »
/usr/bin/ld : <artificial>:(.text+0x2c6) : référence indéfinie vers « PyType_Type »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_traverse » :
<artificial>:(.text+0x2fe) : référence indéfinie vers « PyObject_VisitManagedDict »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_clear » :
<artificial>:(.text+0x325) : référence indéfinie vers « PyObject_ClearManagedDict »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::get_local_internals() » :
<artificial>:(.text+0x35a) : référence indéfinie vers « __cxa_guard_acquire »
/usr/bin/ld : <artificial>:(.text+0x37e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3b4) : référence indéfinie vers « __cxa_guard_release »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::__cxx11::to_string(int) » :
<artificial>:(.text+0x4a5) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::__cxx11::to_string(long) » :
<artificial>:(.text+0x6e0) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::__cxx11::to_string(unsigned long) » :
<artificial>:(.text+0x913) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::pybind11_fail(char const*) » :
<artificial>:(.text+0xac2) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::pybind11_fail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) » :
<artificial>:(.text+0xafa) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::buffer_info::~buffer_info() [clone .lto_priv.0] » :
<artificial>:(.text+0xb57) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xb6c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xb91) : référence indéfinie vers « PyBuffer_Release »
/usr/bin/ld : <artificial>:(.text+0xba4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::handle::throw_gilstate_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const » :
<artificial>:(.text+0xc2b) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text+0xc87) : référence indéfinie vers « std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) »
/usr/bin/ld : <artificial>:(.text+0xc96) : référence indéfinie vers « std::runtime_error::~runtime_error() »
/usr/bin/ld : <artificial>:(.text+0xca0) : référence indéfinie vers « typeinfo for std::runtime_error »
/usr/bin/ld : <artificial>:(.text+0xca5) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text+0xcc5) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xd1c) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::handle::inc_ref() const & » :
<artificial>:(.text+0xd49) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cpp_function::destruct(pybind11::detail::function_record*, bool) » :
<artificial>:(.text+0xe18) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0xe54) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0xe90) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0xee6) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0xf21) : encore plus de références indéfinies suivent vers « PyGILState_Check »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cpp_function::destruct(pybind11::detail::function_record*, bool) » :
<artificial>:(.text+0xfd2) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1003) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x101a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1027) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1041) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1051) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1061) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x12d9) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x12f8) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0x1302) : encore plus de références indéfinies suivent vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cpp_function::initialize_generic(std::unique_ptr<pybind11::detail::function_record, pybind11::cpp_function::InitializingFunctionRecordDeleter>&&, char const*, std::type_info const* const*, unsigned long)::{lambda(void*)#1}::_FUN(void*) » :
<artificial>:(.text+0x1605) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x1642) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x167f) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x16d6) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x1711) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0x174c) : encore plus de références indéfinies suivent vers « PyGILState_Check »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cpp_function::initialize_generic(std::unique_ptr<pybind11::detail::function_record, pybind11::cpp_function::InitializingFunctionRecordDeleter>&&, char const*, std::type_info const* const*, unsigned long)::{lambda(void*)#1}::_FUN(void*) » :
<artificial>:(.text+0x17c3) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x17f1) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1806) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1813) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1829) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1839) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1849) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1859) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1878) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0x1882) : encore plus de références indéfinies suivent vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::function_call::~function_call() » :
<artificial>:(.text+0x18c9) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x1903) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1931) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_object_init » :
<artificial>:(.text+0x1b35) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1b3c) : référence indéfinie vers « PyExc_TypeError »
/usr/bin/ld : <artificial>:(.text+0x1b48) : référence indéfinie vers « PyErr_SetString »
/usr/bin/ld : <artificial>:(.text+0x1b60) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1b8d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::raise_from(_object*, char const*) » :
<artificial>:(.text+0x1d96) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x1db7) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0x1dc8) : référence indéfinie vers « PyErr_NormalizeException »
/usr/bin/ld : <artificial>:(.text+0x1ddb) : référence indéfinie vers « PyException_SetTraceback »
/usr/bin/ld : <artificial>:(.text+0x1e0f) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x1e28) : référence indéfinie vers « PyErr_SetString »
/usr/bin/ld : <artificial>:(.text+0x1e36) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0x1e44) : référence indéfinie vers « PyErr_NormalizeException »
/usr/bin/ld : <artificial>:(.text+0x1e5b) : référence indéfinie vers « PyException_SetCause »
/usr/bin/ld : <artificial>:(.text+0x1e6a) : référence indéfinie vers « PyException_SetContext »
/usr/bin/ld : <artificial>:(.text+0x1e7d) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text+0x1e91) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x1ea1) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::clean_type_id(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) » :
<artificial>:(.text+0x1f16) : référence indéfinie vers « __cxa_demangle »
/usr/bin/ld : <artificial>:(.text+0x2047) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::clean_type_id[abi:cxx11](char const*) » :
<artificial>:(.text+0x21ed) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_fetch_and_normalize::error_fetch_and_normalize(char const*) » :
<artificial>:(.text+0x246a) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0x24e5) : référence indéfinie vers « PyObject_HasAttrString »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_fetch_and_normalize::error_string[abi:cxx11]() const » :
<artificial>:(.text+0x276d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2785) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::translate_exception(std::__exception_ptr::exception_ptr) » :
<artificial>:(.text+0x284c) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_addref() »
/usr/bin/ld : <artificial>:(.text+0x2854) : référence indéfinie vers « std::rethrow_exception(std::__exception_ptr::exception_ptr) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_string[abi:cxx11]() » :
<artificial>:(.text+0x28d5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x292a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2951) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_fetch_and_normalize::format_value_and_trace[abi:cxx11]() const » :
<artificial>:(.text+0x29c3) : référence indéfinie vers « PyObject_Str »
/usr/bin/ld : <artificial>:(.text+0x29ef) : référence indéfinie vers « PyUnicode_AsEncodedString »
/usr/bin/ld : <artificial>:(.text+0x2a38) : référence indéfinie vers « PyBytes_AsStringAndSize »
/usr/bin/ld : <artificial>:(.text+0x2b0d) : référence indéfinie vers « PyObject_GetAttrString »
/usr/bin/ld : <artificial>:(.text+0x2b26) : référence indéfinie vers « PyList_Size »
/usr/bin/ld : <artificial>:(.text+0x2bf5) : référence indéfinie vers « PyBytes_AsStringAndSize »
/usr/bin/ld : <artificial>:(.text+0x2c96) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2cdd) : référence indéfinie vers « PyUnicode_AsEncodedString »
/usr/bin/ld : <artificial>:(.text+0x2e3e) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : <artificial>:(.text+0x2ecc) : référence indéfinie vers « PyFrame_GetCode »
/usr/bin/ld : <artificial>:(.text+0x2ed7) : référence indéfinie vers « PyFrame_GetLineNumber »
/usr/bin/ld : <artificial>:(.text+0x2fba) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x30c1) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x32a8) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3366) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x33b7) : référence indéfinie vers « PyFrame_GetBack »
/usr/bin/ld : <artificial>:(.text+0x3504) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x3514) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x3663) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x37b2) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3899) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text+0x389e) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::gil_scoped_acquire::~gil_scoped_acquire() [clone .lto_priv.0] » :
<artificial>:(.text+0x39a9) : référence indéfinie vers « PyEval_SaveThread »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::m_fetched_error_deleter(pybind11::detail::error_fetch_and_normalize*) » :
<artificial>:(.text+0x39d4) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0x39f3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3a1a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3a2e) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::error_already_set() [clone .lto_priv.0] » :
<artificial>:(.text+0x3a67) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3a8f) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::str::str(char const*) » :
<artificial>:(.text+0x3aeb) : référence indéfinie vers « PyUnicode_FromString »
/usr/bin/ld : <artificial>:(.text+0x3afd) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::str::operator std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >() const » :
<artificial>:(.text+0x3b5e) : référence indéfinie vers « PyUnicode_AsUTF8String »
/usr/bin/ld : <artificial>:(.text+0x3ba1) : référence indéfinie vers « PyBytes_AsStringAndSize »
/usr/bin/ld : <artificial>:(.text+0x3c21) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3c49) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::capsule::initialize_with_void_ptr_destructor(void const*, char const*, void (*)(void*))::{lambda(_object*)#1}::_FUN(_object*) » :
<artificial>:(.text+0x3c71) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0x3c79) : référence indéfinie vers « PyCapsule_GetContext »
/usr/bin/ld : <artificial>:(.text+0x3c95) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0x3c9d) : référence indéfinie vers « PyCapsule_GetName »
/usr/bin/ld : <artificial>:(.text+0x3cb9) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text+0x3cc4) : référence indéfinie vers « PyCapsule_GetPointer »
/usr/bin/ld : <artificial>:(.text+0x3ce6) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text+0x3cf9) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x3d09) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x3d16) : référence indéfinie vers « PyErr_WriteUnraisable »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::get_python_state_dict() » :
<artificial>:(.text+0x3d43) : référence indéfinie vers « PyInterpreterState_Get »
/usr/bin/ld : <artificial>:(.text+0x3d50) : référence indéfinie vers « PyInterpreterState_GetDict »
/usr/bin/ld : <artificial>:(.text+0x3d93) : référence indéfinie vers « PyExc_SystemError »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::get_internals() » :
<artificial>:(.text+0x3df1) : référence indéfinie vers « PyGILState_Ensure »
/usr/bin/ld : <artificial>:(.text+0x3e07) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0x3e5b) : référence indéfinie vers « PyDict_GetItemStringRef »
/usr/bin/ld : <artificial>:(.text+0x3e74) : référence indéfinie vers « PyCapsule_GetPointer »
/usr/bin/ld : <artificial>:(.text+0x3ebe) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text+0x3ec5) : référence indéfinie vers « PyGILState_Release »
/usr/bin/ld : <artificial>:(.text+0x3ed3) : référence indéfinie vers « PyDict_Type »
/usr/bin/ld : <artificial>:(.text+0x3edf) : référence indéfinie vers « PyObject_CallFunctionObjArgs »
/usr/bin/ld : <artificial>:(.text+0x3f06) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3f21) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x402a) : référence indéfinie vers « PyThreadState_Get »
/usr/bin/ld : <artificial>:(.text+0x403c) : référence indéfinie vers « PyThread_tss_create »
/usr/bin/ld : <artificial>:(.text+0x4056) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x4065) : référence indéfinie vers « PyThread_tss_create »
/usr/bin/ld : <artificial>:(.text+0x408b) : référence indéfinie vers « PyCapsule_New »
/usr/bin/ld : <artificial>:(.text+0x40d7) : référence indéfinie vers « PyObject_SetItem »
/usr/bin/ld : <artificial>:(.text+0x4114) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4144) : référence indéfinie vers « PyUnicode_FromString »
/usr/bin/ld : <artificial>:(.text+0x414b) : référence indéfinie vers « PyType_Type »
/usr/bin/ld : <artificial>:(.text+0x4189) : référence indéfinie vers « PyProperty_Type »
/usr/bin/ld : <artificial>:(.text+0x420f) : référence indéfinie vers « PyType_Ready »
/usr/bin/ld : <artificial>:(.text+0x4263) : référence indéfinie vers « PyUnicode_FromString »
/usr/bin/ld : <artificial>:(.text+0x430b) : référence indéfinie vers « PyType_Ready »
/usr/bin/ld : <artificial>:(.text+0x4364) : référence indéfinie vers « PyUnicode_FromString »
/usr/bin/ld : <artificial>:(.text+0x43a4) : référence indéfinie vers « PyBaseObject_Type »
/usr/bin/ld : <artificial>:(.text+0x440e) : référence indéfinie vers « PyType_Ready »
/usr/bin/ld : <artificial>:(.text+0x446f) : référence indéfinie vers « PyExc_SystemError »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_meta_setattro » :
<artificial>:(.text+0x45b2) : référence indéfinie vers « _PyType_Lookup »
/usr/bin/ld : <artificial>:(.text+0x45cb) : référence indéfinie vers « PyType_Type »
/usr/bin/ld : <artificial>:(.text+0x45fe) : référence indéfinie vers « PyObject_IsInstance »
/usr/bin/ld : <artificial>:(.text+0x460d) : référence indéfinie vers « PyObject_IsInstance »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_meta_dealloc » :
<artificial>:(.text+0x4660) : référence indéfinie vers « PyType_Type »
/usr/bin/ld : <artificial>:(.text+0x47a3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x47b0) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4827) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x483c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4849) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::loader_life_support::~loader_life_support() » :
<artificial>:(.text+0x4a96) : référence indéfinie vers « PyThread_tss_get »
/usr/bin/ld : <artificial>:(.text+0x4ab7) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x4afc) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x4b24) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::all_type_info_populate(_typeobject*, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> >&) » :
<artificial>:(.text+0x4bf1) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x4bfe) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x4c7d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4f62) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x500d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x50b3) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5159) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x51bc) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x5346) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x5353) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x54ae) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x555d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5609) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x56b6) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x57a8) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0x585a) : encore plus de références indéfinies suivent vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::all_type_info_populate(_typeobject*, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> >&) » :
<artificial>:(.text+0x58ed) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x592b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x599c) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5a09) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5a3d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5a6c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5a9b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5aca) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0x5b08) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::all_type_info_populate(_typeobject*, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> >&) » :
<artificial>:(.text+0x5c14) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5c79) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5cfa) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5d9f) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5e43) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5ea9) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5edf) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5f12) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::gil_scoped_acquire::gil_scoped_acquire() » :
<artificial>:(.text+0x6127) : référence indéfinie vers « PyThread_tss_get »
/usr/bin/ld : <artificial>:(.text+0x6134) : référence indéfinie vers « PyThreadState_GetUnchecked »
/usr/bin/ld : <artificial>:(.text+0x6159) : référence indéfinie vers « PyEval_AcquireThread »
/usr/bin/ld : <artificial>:(.text+0x6171) : référence indéfinie vers « PyGILState_GetThisThreadState »
/usr/bin/ld : <artificial>:(.text+0x6186) : référence indéfinie vers « PyThreadState_New »
/usr/bin/ld : <artificial>:(.text+0x61a3) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::gil_scoped_acquire::dec_ref() » :
<artificial>:(.text+0x61ce) : référence indéfinie vers « PyThreadState_GetUnchecked »
/usr/bin/ld : <artificial>:(.text+0x61ed) : référence indéfinie vers « PyThreadState_Clear »
/usr/bin/ld : <artificial>:(.text+0x6206) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x6211) : référence indéfinie vers « PyThreadState_DeleteCurrent »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::all_type_info(_typeobject*) » :
<artificial>:(.text+0x62d6) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6316) : référence indéfinie vers « std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const »
/usr/bin/ld : <artificial>:(.text+0x63a9) : référence indéfinie vers « PyWeakref_NewRef »
/usr/bin/ld : <artificial>:(.text+0x63fe) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x646c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x64fb) : référence indéfinie vers « std::__throw_bad_array_new_length() »
/usr/bin/ld : <artificial>:(.text+0x6500) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text+0x6505) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_meta_call » :
<artificial>:(.text+0x6559) : référence indéfinie vers « PyType_Type »
/usr/bin/ld : <artificial>:(.text+0x65fb) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x6630) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x6654) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x667f) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x66a7) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0x66c3) : encore plus de références indéfinies suivent vers « PyType_IsSubtype »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_meta_call » :
<artificial>:(.text+0x675f) : référence indéfinie vers « PyExc_TypeError »
/usr/bin/ld : <artificial>:(.text+0x6776) : référence indéfinie vers « PyErr_Format »
/usr/bin/ld : <artificial>:(.text+0x679c) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::instance::allocate_layout() » :
<artificial>:(.text+0x6a27) : référence indéfinie vers « PyMem_Calloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_object_dealloc » :
<artificial>:(.text+0x6db7) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x6dc4) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x6fae) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x6fbb) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x714b) : référence indéfinie vers « PyObject_ClearWeakRefs »
/usr/bin/ld : <artificial>:(.text+0x7153) : référence indéfinie vers « _PyObject_GetDictPtr »
/usr/bin/ld : <artificial>:(.text+0x727f) : référence indéfinie vers « PyObject_GC_UnTrack »
/usr/bin/ld : <artificial>:(.text+0x738a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x73ed) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x745f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x74a2) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x74ac) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x7554) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x755b) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x7562) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:<artificial>:(.text+0x7596) : encore plus de références indéfinies suivent vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cpp_function::dispatcher(_object*, _object*, _object*) » :
<artificial>:(.text+0x7636) : référence indéfinie vers « PyCapsule_Type »
/usr/bin/ld : <artificial>:(.text+0x767b) : référence indéfinie vers « PyCapsule_GetPointer »
/usr/bin/ld : <artificial>:(.text+0x76a1) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x76ae) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x77a3) : référence indéfinie vers « PyUnicode_FromString »
/usr/bin/ld : <artificial>:(.text+0x77be) : référence indéfinie vers « PyDict_GetItemWithError »
/usr/bin/ld : <artificial>:(.text+0x7816) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7833) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7b2a) : référence indéfinie vers « PyDict_Size »
/usr/bin/ld : <artificial>:(.text+0x7b52) : référence indéfinie vers « PyTuple_New »
/usr/bin/ld : <artificial>:(.text+0x7b91) : référence indéfinie vers « PyTuple_New »
/usr/bin/ld : <artificial>:(.text+0x7ced) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x7cfc) : référence indéfinie vers « PyExc_TypeError »
/usr/bin/ld : <artificial>:(.text+0x7d0b) : référence indéfinie vers « PyErr_SetString »
/usr/bin/ld : <artificial>:(.text+0x7d29) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x7d68) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x7e50) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7f82) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7fd9) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x81e3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8239) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x8318) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8460) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8536) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x856a) : référence indéfinie vers « PyDict_New »
/usr/bin/ld : <artificial>:(.text+0x86c3) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x87b3) : référence indéfinie vers « PyThread_tss_get »
/usr/bin/ld : <artificial>:(.text+0x8830) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x8878) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x89e0) : référence indéfinie vers « PyThread_tss_get »
/usr/bin/ld : <artificial>:(.text+0x8a63) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x8ae3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8b00) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8b25) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8be9) : référence indéfinie vers « PyUnicode_FromString »
/usr/bin/ld : <artificial>:(.text+0x8c11) : référence indéfinie vers « PyDict_GetItemWithError »
/usr/bin/ld : <artificial>:(.text+0x8c67) : référence indéfinie vers « PyDict_Copy »
/usr/bin/ld : <artificial>:(.text+0x8ca3) : référence indéfinie vers « PyDict_DelItemString »
/usr/bin/ld : <artificial>:(.text+0x8ccb) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x8f9d) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x91a1) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x959e) : référence indéfinie vers « PyTuple_Size »
/usr/bin/ld : <artificial>:(.text+0x95d1) : référence indéfinie vers « PyTuple_GetItem »
/usr/bin/ld : <artificial>:(.text+0x9628) : référence indéfinie vers « PyObject_Repr »
/usr/bin/ld : <artificial>:(.text+0x969e) : référence indéfinie vers « PyTuple_Size »
/usr/bin/ld : <artificial>:(.text+0x973b) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x97e8) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x9898) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x9a25) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x9a8b) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x9acc) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x9b46) : référence indéfinie vers « PyTuple_New »
/usr/bin/ld : <artificial>:(.text+0x9bcf) : référence indéfinie vers « PyTuple_SetItem »
/usr/bin/ld : <artificial>:(.text+0x9c23) : référence indéfinie vers « PyTuple_SetItem »
/usr/bin/ld : <artificial>:(.text+0x9cfc) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x9d03) : référence indéfinie vers « PyExc_TypeError »
/usr/bin/ld : <artificial>:(.text+0x9da4) : référence indéfinie vers « _Py_NotImplementedStruct »
/usr/bin/ld : <artificial>:(.text+0x9df7) : référence indéfinie vers « PyDict_Size »
/usr/bin/ld : <artificial>:(.text+0x9e80) : référence indéfinie vers « PyDict_Next »
/usr/bin/ld : <artificial>:(.text+0x9f43) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x9f73) : référence indéfinie vers « PyTuple_New »
/usr/bin/ld : <artificial>:(.text+0x9fab) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x9fb8) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x9ff2) : référence indéfinie vers « PyObject_CallObject »
/usr/bin/ld : <artificial>:(.text+0xa094) : référence indéfinie vers « PyObject_Repr »
/usr/bin/ld : <artificial>:(.text+0xa0f8) : référence indéfinie vers « PyDict_Next »
/usr/bin/ld : <artificial>:(.text+0xa1bf) : référence indéfinie vers « PyTuple_SetItem »
/usr/bin/ld : <artificial>:(.text+0xa255) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xa606) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xa656) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0xa65d) : référence indéfinie vers « PyExc_TypeError »
/usr/bin/ld : <artificial>:(.text+0xa695) : référence indéfinie vers « PyObject_Str »
/usr/bin/ld : <artificial>:(.text+0xa703) : référence indéfinie vers « PyErr_SetString »
/usr/bin/ld : <artificial>:(.text+0xa75a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xa7a2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xa7eb) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xa813) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0xa84a) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0xa893) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0xa8ca) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0xa910) : référence indéfinie vers « PyErr_SetString »
/usr/bin/ld : <artificial>:(.text+0xa93b) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0xab4c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::npy_api::lookup() » :
<artificial>:(.text+0xad76) : référence indéfinie vers « PyObject_GetAttrString »
/usr/bin/ld : <artificial>:(.text+0xad9f) : référence indéfinie vers « PyCapsule_GetPointer »
/usr/bin/ld : <artificial>:(.text+0xaebb) : référence indéfinie vers « PyExc_SystemError »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::what() const » :
<artificial>:(.text+0xaf24) : référence indéfinie vers « PyErr_Fetch »
/usr/bin/ld : <artificial>:(.text+0xaf46) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text+0xb020) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xb038) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::finalize_interpreter() » :
<artificial>:(.text+0xb0f8) : référence indéfinie vers « PyDict_GetItemStringRef »
/usr/bin/ld : <artificial>:(.text+0xb11c) : référence indéfinie vers « PyCapsule_GetPointer »
/usr/bin/ld : <artificial>:(.text+0xb165) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xb177) : référence indéfinie vers « Py_Finalize »
/usr/bin/ld : <artificial>:(.text+0xb199) : référence indéfinie vers « PyThread_tss_delete »
/usr/bin/ld : <artificial>:(.text+0xb1a5) : référence indéfinie vers « PyThread_tss_delete »
/usr/bin/ld : <artificial>:(.text+0xb1ec) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xb23c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xb256) : référence indéfinie vers « PyExc_SystemError »
/usr/bin/ld : <artificial>:(.text+0xb26f) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cast_error::~cast_error() [clone .lto_priv.0] » :
<artificial>:(.text+0x4b) : référence indéfinie vers « std::runtime_error::~runtime_error() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cast_error::~cast_error() » :
<artificial>:(.text+0x6d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cast_error::set_error() const » :
<artificial>:(.text+0x94) : référence indéfinie vers « PyErr_SetString »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::bad_variant_access::~bad_variant_access() » :
<artificial>:(.text+0xab) : référence indéfinie vers « std::exception::~exception() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::bad_variant_access::~bad_variant_access() » :
<artificial>:(.text+0xcd) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::~error_already_set() [clone .lto_priv.0] » :
<artificial>:(.text+0x133) : référence indéfinie vers « std::exception::~exception() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::~error_already_set() » :
<artificial>:(.text+0x218) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::instance::deallocate_layout() » :
<artificial>:(.text+0x3dd) : référence indéfinie vers « PyMem_Free »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::buffer_info::~buffer_info() [clone .lto_priv.0] » :
<artificial>:(.text+0xb86) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::function_call::~function_call() » :
<artificial>:(.text+0x191e) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::loader_life_support::~loader_life_support() » :
<artificial>:(.text+0x4b70) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::all_type_info_populate(_typeobject*, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> >&) » :
<artificial>:(.text+0x525b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_object_dealloc » :
<artificial>:(.text+0x7277) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::get_local_internals() [clone .cold] » :
<artificial>:(.text.unlikely+0x1e) : référence indéfinie vers « __cxa_guard_abort »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::apply_exception_translators(std::forward_list<void (*)(std::__exception_ptr::exception_ptr), std::allocator<void (*)(std::__exception_ptr::exception_ptr)> >&) » :
<artificial>:(.text.unlikely+0x40) : référence indéfinie vers « std::current_exception() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x68) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_addref() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7e) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x98) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb0) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbd) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc5) : référence indéfinie vers « std::current_exception() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xed) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xfd) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x102) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x11e) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::pybind11_fail(char const*) [clone .cold] » :
<artificial>:(.text.unlikely+0x15d) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x16b) : référence indéfinie vers « std::runtime_error::runtime_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x172) : référence indéfinie vers « std::runtime_error::~runtime_error() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x179) : référence indéfinie vers « typeinfo for std::runtime_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x181) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x18c) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::pybind11_fail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [clone .cold] » :
<artificial>:(.text.unlikely+0x19e) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1ac) : référence indéfinie vers « std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1b3) : référence indéfinie vers « std::runtime_error::~runtime_error() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1ba) : référence indéfinie vers « typeinfo for std::runtime_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1c2) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1cd) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::handle::throw_gilstate_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const [clone .cold] » :
<artificial>:(.text.unlikely+0x1e2) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1f2) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::function_call::~function_call() [clone .lto_priv.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x248) : référence indéfinie vers « __cxa_call_terminate »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*) [clone .cold] » :
<artificial>:(.text.unlikely+0x254) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_object_init.cold » :
<artificial>:(.text.unlikely+0x260) : référence indéfinie vers « std::__throw_logic_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::clean_type_id(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [clone .cold] » :
<artificial>:(.text.unlikely+0x296) : référence indéfinie vers « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x2b9) : référence indéfinie vers « std::__throw_out_of_range_fmt(char const*, ...) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_fetch_and_normalize::error_fetch_and_normalize(char const*) [clone .cold] » :
<artificial>:(.text.unlikely+0x35c) : référence indéfinie vers « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_fetch_and_normalize::error_string[abi:cxx11]() const [clone .cold] » :
<artificial>:(.text.unlikely+0x38a) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x3bd) : référence indéfinie vers « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_fetch_and_normalize::restore() » :
<artificial>:(.text.unlikely+0x427) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::translate_exception(std::__exception_ptr::exception_ptr) [clone .cold] » :
<artificial>:(.text.unlikely+0x457) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x47d) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x484) : référence indéfinie vers « PyExc_RuntimeError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4aa) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4b7) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4be) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4c5) : référence indéfinie vers « typeinfo for std::exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4d7) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4f8) : référence indéfinie vers « PyExc_RuntimeError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x50a) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x511) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x518) : référence indéfinie vers « typeinfo for std::overflow_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x52a) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x54b) : référence indéfinie vers « PyExc_OverflowError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x560) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x567) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x56e) : référence indéfinie vers « typeinfo for std::range_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x580) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5a1) : référence indéfinie vers « PyExc_ValueError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5b9) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5c9) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5d9) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5e6) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5ed) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5f4) : référence indéfinie vers « typeinfo for std::out_of_range »
/usr/bin/ld : <artificial>:(.text.unlikely+0x606) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x627) : référence indéfinie vers « PyExc_IndexError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x63c) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x643) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x64a) : référence indéfinie vers « typeinfo for std::length_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x65c) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x67d) : référence indéfinie vers « PyExc_ValueError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x695) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6a5) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6b2) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6b9) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6c0) : référence indéfinie vers « typeinfo for std::invalid_argument »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6d2) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6f3) : référence indéfinie vers « PyExc_ValueError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x708) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x70f) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x716) : référence indéfinie vers « typeinfo for std::domain_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x728) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x749) : référence indéfinie vers « PyExc_ValueError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x761) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x771) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x77e) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x785) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x78c) : référence indéfinie vers « typeinfo for std::bad_alloc »
/usr/bin/ld : <artificial>:(.text.unlikely+0x79e) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7bf) : référence indéfinie vers « PyExc_MemoryError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7d4) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7e3) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7f9) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x820) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x830) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x83d) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x844) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x85d) : référence indéfinie vers « __dynamic_cast »
/usr/bin/ld : <artificial>:(.text.unlikely+0x881) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x893) : référence indéfinie vers « PyExc_RuntimeError »
/usr/bin/ld : <artificial>:(.text.unlikely+0x8af) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x8bf) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_string[abi:cxx11]() [clone .cold] » :
<artificial>:(.text.unlikely+0x8d3) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x8f3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x900) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text.unlikely+0x942) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text.unlikely+0x96f) : référence indéfinie vers « __cxa_call_terminate »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::error_fetch_and_normalize::format_value_and_trace[abi:cxx11]() const [clone .cold] » :
<artificial>:(.text.unlikely+0x984) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x990) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x99c) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x9a8) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x9bc) : référence indéfinie vers « std::__throw_logic_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa7c) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xad5) : référence indéfinie vers « std::__throw_logic_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::error_already_set() [clone .lto_priv.0] [clone .cold] » :
<artificial>:(.text.unlikely+0xb1b) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb23) : référence indéfinie vers « std::exception::~exception() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb30) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb3d) : référence indéfinie vers « __cxa_rethrow »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb4d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::str::str(char const*) [clone .cold] » :
<artificial>:(.text.unlikely+0xb5a) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb7b) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb8b) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::str::str(pybind11::handle) [clone .lto_priv.0] » :
<artificial>:(.text.unlikely+0xbab) : référence indéfinie vers « PyObject_Str »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbbe) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbdf) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbea) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::str::operator std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >() const [clone .cold] » :
<artificial>:(.text.unlikely+0xc0e) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc2f) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc39) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc5a) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc83) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc96) : référence indéfinie vers « std::__throw_logic_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xca2) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xcad) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::capsule::initialize_with_void_ptr_destructor(void const*, char const*, void (*)(void*))::{lambda(_object*)#1}::_FUN(_object*) [clone .cold] » :
<artificial>:(.text.unlikely+0xcb9) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xcda) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xcea) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd00) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd13) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd25) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd46) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::get_python_state_dict() [clone .cold] » :
<artificial>:(.text.unlikely+0xd52) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd73) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd83) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::get_internals() [clone .cold] » :
<artificial>:(.text.unlikely+0xdc2) : référence indéfinie vers « PyErr_Restore »
/usr/bin/ld : <artificial>:(.text.unlikely+0xdc9) : référence indéfinie vers « PyGILState_Release »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe14) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe74) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe83) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xea4) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xeb6) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xed7) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xee1) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xf02) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xf27) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xf5b) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xfa1) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xfc2) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xfcc) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xfed) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xff8) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x100d) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1027) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::all_type_info_populate(_typeobject*, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> >&) [clone .cold] » :
<artificial>:(.text.unlikely+0x1038) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1044) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1050) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x105c) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x107d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::try_translate_exceptions() » :
<artificial>:(.text.unlikely+0x10d3) : référence indéfinie vers « PyExc_SystemError »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::all_type_info(_typeobject*) [clone .cold] » :
<artificial>:(.text.unlikely+0x1100) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x110d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1120) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1179) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x119a) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::instance::allocate_layout() [clone .cold] » :
<artificial>:(.text.unlikely+0x11ba) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x11c1) : référence indéfinie vers « vtable for std::bad_alloc »
/usr/bin/ld : <artificial>:(.text.unlikely+0x11cb) : référence indéfinie vers « std::bad_alloc::~bad_alloc() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x11d2) : référence indéfinie vers « typeinfo for std::bad_alloc »
/usr/bin/ld : <artificial>:(.text.unlikely+0x11de) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11_object_dealloc.cold » :
<artificial>:(.text.unlikely+0x11f1) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::cpp_function::dispatcher(_object*, _object*, _object*) [clone .cold] » :
<artificial>:(.text.unlikely+0x121f) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1240) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x12b3) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x12fd) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1317) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1339) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1352) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1373) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x13e4) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1404) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x142e) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1442) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1451) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1472) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x147a) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1488) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1495) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x14a5) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x14aa) : référence indéfinie vers « __cxa_rethrow »
/usr/bin/ld : <artificial>:(.text.unlikely+0x14b4) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x14cf) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x14e2) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x14f3) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1512) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1565) : référence indéfinie vers « std::__throw_out_of_range_fmt(char const*, ...) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1593) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1598) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x15b9) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x15da) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x15e4) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1605) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1620) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x166d) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x168e) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x16bc) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x16dd) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x172a) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x173e) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x175f) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x176f) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x17be) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x17df) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x181d) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x183e) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x186e) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1882) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x18a5) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x18b6) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x18d7) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1906) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x191d) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1958) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1962) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1983) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x19b2) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x19b7) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::npy_api::lookup() [clone .cold] » :
<artificial>:(.text.unlikely+0x1a0e) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1a2f) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1a3e) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1a5f) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1a6a) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1a82) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::error_already_set::what() const [clone .cold] » :
<artificial>:(.text.unlikely+0x1aae) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1ac6) : référence indéfinie vers « __cxa_call_terminate »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1ae1) : référence indéfinie vers « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::gil_scoped_release::~gil_scoped_release() [clone .lto_priv.0] » :
<artificial>:(.text.unlikely+0x1b01) : référence indéfinie vers « PyEval_RestoreThread »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1b25) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « std::__throw_bad_variant_access(char const*) » :
<artificial>:(.text.unlikely+0x1b39) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1b5d) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::finalize_interpreter() [clone .cold] » :
<artificial>:(.text.unlikely+0x1b73) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1b7d) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1b9e) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1bab) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1bcb) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « Py_XDECREF.lto_priv.0 » :
<artificial>:(.text.unlikely+0x15) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::translate_exception(std::__exception_ptr::exception_ptr) [clone .cold] » :
<artificial>:(.text.unlikely+0x4a2) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o : dans la fonction « pybind11::detail::try_translate_exceptions() » :
<artificial>:(.text.unlikely+0x10e3) : référence indéfinie vers « PyErr_SetString »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x0) : référence indéfinie vers « vtable for __cxxabiv1::__class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x10) : référence indéfinie vers « vtable for __cxxabiv1::__si_class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x28) : référence indéfinie vers « vtable for __cxxabiv1::__si_class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x40) : référence indéfinie vers « vtable for __cxxabiv1::__si_class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x50) : référence indéfinie vers « typeinfo for std::exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x58) : référence indéfinie vers « vtable for __cxxabiv1::__si_class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x70) : référence indéfinie vers « vtable for __cxxabiv1::__si_class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x88) : référence indéfinie vers « vtable for __cxxabiv1::__si_class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0x98) : référence indéfinie vers « typeinfo for std::runtime_error »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0xa0) : référence indéfinie vers « vtable for __cxxabiv1::__si_class_type_info »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0xb0) : référence indéfinie vers « typeinfo for std::exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.ro+0xd8) : référence indéfinie vers « std::runtime_error::what() const »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel+0x8) : référence indéfinie vers « PyObject_GenericGetDict »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel+0x10) : référence indéfinie vers « PyObject_GenericSetDict »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTIN10__cxxabiv115__forced_unwindE[DW.ref._ZTIN10__cxxabiv115__forced_unwindE]+0x0) : référence indéfinie vers « typeinfo for __cxxabiv1::__forced_unwind »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt11range_error[DW.ref._ZTISt11range_error]+0x0) : référence indéfinie vers « typeinfo for std::range_error »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt12domain_error[DW.ref._ZTISt12domain_error]+0x0) : référence indéfinie vers « typeinfo for std::domain_error »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt12length_error[DW.ref._ZTISt12length_error]+0x0) : référence indéfinie vers « typeinfo for std::length_error »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt12out_of_range[DW.ref._ZTISt12out_of_range]+0x0) : référence indéfinie vers « typeinfo for std::out_of_range »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt14overflow_error[DW.ref._ZTISt14overflow_error]+0x0) : référence indéfinie vers « typeinfo for std::overflow_error »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt16invalid_argument[DW.ref._ZTISt16invalid_argument]+0x0) : référence indéfinie vers « typeinfo for std::invalid_argument »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt16nested_exception[DW.ref._ZTISt16nested_exception]+0x0) : référence indéfinie vers « typeinfo for std::nested_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt9bad_alloc[DW.ref._ZTISt9bad_alloc]+0x0) : référence indéfinie vers « typeinfo for std::bad_alloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref._ZTISt9exception[DW.ref._ZTISt9exception]+0x0) : référence indéfinie vers « typeinfo for std::exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans0.ltrans.o:(.data.rel.local.DW.ref.__gxx_personality_v0[DW.ref.__gxx_personality_v0]+0x0) : référence indéfinie vers « __gxx_personality_v0 »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::unique_ptr<SimplexTree::node, std::default_delete<SimplexTree::node> >::~unique_ptr() » :
<artificial>:(.text+0x17c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x189) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1ae) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1bb) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x202) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0xaba) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> >::_M_realloc_append<SimplexTree::node* const&>(SimplexTree::node* const&) » :
<artificial>:(.text+0x3c1a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3c72) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « MakeFacesVectorized1(int, int) » :
<artificial>:(.text+0x3d8d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3dc0) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3e06) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3e69) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3ea5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3eb2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3eec) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4230) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x42ef) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4321) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x46de) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x477a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x47ab) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4b50) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__detail::_Map_base<SimplexTree::node*, std::pair<SimplexTree::node* const, int>, std::allocator<std::pair<SimplexTree::node* const, int> >, std::__detail::_Select1st, std::equal_to<SimplexTree::node*>, std::hash<SimplexTree::node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](SimplexTree::node* const&) » :
<artificial>:(.text+0x578e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x57c1) : référence indéfinie vers « std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const »
/usr/bin/ld : <artificial>:(.text+0x582e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x589c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5926) : référence indéfinie vers « std::__throw_bad_array_new_length() »
/usr/bin/ld : <artificial>:(.text+0x592b) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) » :
<artificial>:(.text+0x5a34) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text+0x5a5e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5ad2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pybind11::tuple pybind11::make_tuple<(pybind11::return_value_policy)1, pybind11::list, int&>(pybind11::list&&, int&) » :
<artificial>:(.text+0x5bcf) : référence indéfinie vers « PyLong_FromSsize_t »
/usr/bin/ld : <artificial>:(.text+0x5bf3) : référence indéfinie vers « PyTuple_New »
/usr/bin/ld : <artificial>:(.text+0x5c20) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x5c30) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x5ccd) : référence indéfinie vers « typeinfo for int »
/usr/bin/ld : <artificial>:(.text+0x5cf8) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<_typeobject*, std::pair<_typeobject* const, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> > >, std::allocator<std::pair<_typeobject* const, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> > > >, std::__detail::_Select1st, std::equal_to<_typeobject*>, std::hash<_typeobject*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text+0x5ddf) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5dec) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<void const*, std::pair<void const* const, pybind11::detail::instance*>, std::allocator<std::pair<void const* const, pybind11::detail::instance*> >, std::__detail::_Select1st, std::equal_to<void const*>, std::hash<void const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text+0x5e6c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<std::pair<_object const*, char const*>, std::pair<_object const*, char const*>, std::allocator<std::pair<_object const*, char const*> >, std::__detail::_Identity, std::equal_to<std::pair<_object const*, char const*> >, pybind11::detail::override_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text+0x5ee4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<std::type_index, std::pair<std::type_index const, std::vector<bool (*)(_object*, void*&), std::allocator<bool (*)(_object*, void*&)> > >, std::allocator<std::pair<std::type_index const, std::vector<bool (*)(_object*, void*&), std::allocator<bool (*)(_object*, void*&)> > > >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text+0x5f6f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0x5f7c) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pad_and_pack_S_general(std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > const&) » :
<artificial>:(.text+0x68f7) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x693c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pad_and_pack_F_general(std::unordered_map<std::vector<unsigned long, std::allocator<unsigned long> >, int, VectorHash, std::equal_to<std::vector<unsigned long, std::allocator<unsigned long> > >, std::allocator<std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int> > > const&) » :
<artificial>:(.text+0x6caa) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6ce9) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long) » :
<artificial>:(.text+0x705a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7082) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x70b6) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<std::type_index, std::pair<std::type_index const, pybind11::detail::type_info*>, std::allocator<std::pair<std::type_index const, pybind11::detail::type_info*> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear() » :
<artificial>:(.text+0x736c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void std::vector<pybind11::handle, std::allocator<pybind11::handle> >::_M_realloc_append<pybind11::handle>(pybind11::handle&&) » :
<artificial>:(.text+0x743e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7561) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__detail::_Map_base<std::vector<unsigned long, std::allocator<unsigned long> >, std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int>, std::allocator<std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int> >, std::__detail::_Select1st, std::equal_to<std::vector<unsigned long, std::allocator<unsigned long> > >, VectorHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::vector<unsigned long, std::allocator<unsigned long> > const&) » :
<artificial>:(.text+0x7846) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x787e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x78dd) : référence indéfinie vers « std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const »
/usr/bin/ld : <artificial>:(.text+0x790f) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7981) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7a97) : référence indéfinie vers « std::__throw_bad_array_new_length() »
/usr/bin/ld : <artificial>:(.text+0x7ac1) : référence indéfinie vers « std::__throw_bad_array_new_length() »
/usr/bin/ld : <artificial>:(.text+0x7ac6) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, long, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#2}> >(__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, long, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#2}>) » :
<artificial>:(.text+0x8833) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8a0c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8bbc) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8ca5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x9189) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0x9368) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pybind11::cpp_function::initialize<pybind11::detail::all_type_info_get_cache(_typeobject*)::{lambda(pybind11::handle)#1}, void, pybind11::handle>(pybind11::detail::all_type_info_get_cache(_typeobject*)::{lambda(pybind11::handle)#1}&&, void (*)(pybind11::handle))::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) [clone .lto_priv.0] » :
<artificial>:(.text+0xbee2) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void SimplexTree::insert_it<false, __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > > >(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, SimplexTree::node*, unsigned long) » :
<artificial>:(.text+0xc096) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xc296) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xc2a3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xc2d7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xc2e4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xc43c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0xc449) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void SimplexTree::insert_it<false, __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > > >(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, SimplexTree::node*, unsigned long) » :
<artificial>:(.text+0xc989) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xc9e5) : référence indéfinie vers « std::_Rb_tree_decrement(std::_Rb_tree_node_base*) »
/usr/bin/ld : <artificial>:(.text+0xca50) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xcaf7) : référence indéfinie vers « std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) »
/usr/bin/ld : <artificial>:(.text+0xce8a) : référence indéfinie vers « std::invalid_argument::invalid_argument(char const*) »
/usr/bin/ld : <artificial>:(.text+0xce92) : référence indéfinie vers « std::invalid_argument::~invalid_argument() »
/usr/bin/ld : <artificial>:(.text+0xcf88) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xd1ef) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xd286) : référence indéfinie vers « std::_Rb_tree_increment(std::_Rb_tree_node_base*) »
/usr/bin/ld : <artificial>:(.text+0xd2d4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xd738) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xdb41) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « m_sequence_to_py_list(std::vector<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> >, std::allocator<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> > > > const&, SimplexTree const&) » :
<artificial>:(.text+0xdc55) : référence indéfinie vers « PyList_New »
/usr/bin/ld : <artificial>:(.text+0xdcbf) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xdd0c) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xdd63) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xddac) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xddf3) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0xde3e) : encore plus de références indéfinies suivent vers « PyLong_FromSize_t »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « m_sequence_to_py_list(std::vector<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> >, std::allocator<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> > > > const&, SimplexTree const&) » :
<artificial>:(.text+0xdec7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xdefc) : référence indéfinie vers « PyList_New »
/usr/bin/ld : <artificial>:(.text+0xdf61) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xdfad) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xdffa) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xe051) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xe09a) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0xe0e0) : encore plus de références indéfinies suivent vers « PyLong_FromSize_t »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « m_sequence_to_py_list(std::vector<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> >, std::allocator<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> > > > const&, SimplexTree const&) » :
<artificial>:(.text+0xe1b4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xe205) : référence indéfinie vers « PyTuple_New »
/usr/bin/ld : <artificial>:(.text+0xe235) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0xe242) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0xe2fe) : référence indéfinie vers « PyList_New »
/usr/bin/ld : <artificial>:(.text+0xe6bc) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xe709) : référence indéfinie vers « PyList_New »
/usr/bin/ld : <artificial>:(.text+0xe76c) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xe7b5) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xe7ff) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xe852) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xe899) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0xe8dd) : encore plus de références indéfinies suivent vers « PyLong_FromSize_t »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « m_sequence_to_py_list(std::vector<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> >, std::allocator<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> > > > const&, SimplexTree const&) » :
<artificial>:(.text+0xe9a9) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xe9cc) : référence indéfinie vers « PyLong_FromSize_t »
/usr/bin/ld : <artificial>:(.text+0xea1b) : référence indéfinie vers « PyList_New »
/usr/bin/ld : <artificial>:(.text+0xeac4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xeb24) : référence indéfinie vers « PySequence_List »
/usr/bin/ld : <artificial>:(.text+0xeb98) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xede9) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xee59) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf0a8) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf0fd) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « _Min_buffered(MorseSequence&, pybind11::array_t<unsigned long, 16> const&, pybind11::array_t<unsigned long, 16> const&) » :
<artificial>:(.text+0xf33d) : référence indéfinie vers « MorseSequence::get_simplex_tree() »
/usr/bin/ld : <artificial>:(.text+0xf47b) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf4ac) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf4fa) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf52e) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf544) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf575) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf5cf) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf5ff) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf60d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf63e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf698) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf6c7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf7a7) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf7e7) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf855) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf877) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf89b) : référence indéfinie vers « std::cerr »
/usr/bin/ld : <artificial>:(.text+0xf8af) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text+0xf8bf) : référence indéfinie vers « std::ostream& std::ostream::_M_insert<long>(long) »
/usr/bin/ld : <artificial>:(.text+0xf8f2) : référence indéfinie vers « std::ostream::put(char) »
/usr/bin/ld : <artificial>:(.text+0xf8fa) : référence indéfinie vers « std::ostream::flush() »
/usr/bin/ld : <artificial>:(.text+0xf941) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf965) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf97b) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf9a8) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf9f4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfa26) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfa33) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfa60) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfaac) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfd0b) : référence indéfinie vers « std::cerr »
/usr/bin/ld : <artificial>:(.text+0xfd27) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text+0xfd37) : référence indéfinie vers « std::ostream& std::ostream::_M_insert<long>(long) »
/usr/bin/ld : <artificial>:(.text+0xfd74) : référence indéfinie vers « std::ostream::put(char) »
/usr/bin/ld : <artificial>:(.text+0xfd7c) : référence indéfinie vers « std::ostream::flush() »
/usr/bin/ld : <artificial>:(.text+0xfd9e) : référence indéfinie vers « MorseSequence::Min(std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > const&, std::unordered_map<SimplexTree::node*, int, std::hash<SimplexTree::node*>, std::equal_to<SimplexTree::node*>, std::allocator<std::pair<SimplexTree::node* const, int> > > const&) »
/usr/bin/ld : <artificial>:(.text+0xfdf1) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfe14) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfe73) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfe8d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xfeac) : référence indéfinie vers « std::ctype<char>::_M_widen_init() const »
/usr/bin/ld : <artificial>:(.text+0x10174) : référence indéfinie vers « std::ctype<char>::_M_widen_init() const »
/usr/bin/ld : <artificial>:(.text+0x10278) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x102f1) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1031c) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x10365) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1039b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x103b1) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x103dd) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x10428) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1045d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1046a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x10497) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x104e2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1051b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pybind11::detail::accessor<pybind11::detail::accessor_policies::str_attr>::get_cache() const » :
<artificial>:(.text+0x10669) : référence indéfinie vers « PyObject_GetAttrString »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::enable_if<(!std::is_base_of<pybind11::detail::pyobject_tag, std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type>::value)&&pybind11::detail::move_if_unreferenced<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, void>::value, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type pybind11::cast<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(pybind11::object&&) » :
<artificial>:(.text+0x10708) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::once_flag::_Prepare_execution::_Prepare_execution<std::call_once<pybind11::gil_safe_call_once_and_store<pybind11::detail::npy_api>::call_once_and_store_result<pybind11::detail::npy_api (&)()>(pybind11::detail::npy_api (&)())::{lambda()#1}>(std::once_flag&, pybind11::detail::npy_api (&)())::{lambda()#1}>(pybind11::detail::npy_api (&)())::{lambda()#1}::_FUN() » :
<artificial>:(.text+0x10729) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::unique_ptr<SimplexTree::node, std::default_delete<SimplexTree::node> >::~unique_ptr() » :
<artificial>:(.text+0x21f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release_last_use_cold() » :
<artificial>:(.text+0x599d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() » :
<artificial>:(.text+0x5b97) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<_typeobject*, std::pair<_typeobject* const, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> > >, std::allocator<std::pair<_typeobject* const, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> > > >, std::__detail::_Select1st, std::equal_to<_typeobject*>, std::hash<_typeobject*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text+0x5e3b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<void const*, std::pair<void const* const, pybind11::detail::instance*>, std::allocator<std::pair<void const* const, pybind11::detail::instance*> >, std::__detail::_Select1st, std::equal_to<void const*>, std::hash<void const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text+0x5eb8) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text+0x5f30) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> >::_M_realloc_append<SimplexTree::node* const&>(SimplexTree::node* const&) [clone .cold] » :
<artificial>:(.text.unlikely+0x130) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « MakeFacesVectorized1(int, int) [clone .cold] » :
<artificial>:(.text.unlikely+0x13c) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x148) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x155) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x162) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x183) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x191) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x19f) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__detail::_Map_base<SimplexTree::node*, std::pair<SimplexTree::node* const, int>, std::allocator<std::pair<SimplexTree::node* const, int> >, std::__detail::_Select1st, std::equal_to<SimplexTree::node*>, std::hash<SimplexTree::node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](SimplexTree::node* const&) [clone .cold] » :
<artificial>:(.text.unlikely+0x1b5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) [clone .cold] » :
<artificial>:(.text.unlikely+0x1ca) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pybind11::tuple pybind11::make_tuple<(pybind11::return_value_policy)1, pybind11::list, int&>(pybind11::list&&, int&) [clone .cold] » :
<artificial>:(.text.unlikely+0x1fd) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x215) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<_object*, _object*, std::allocator<_object*>, std::__detail::_Identity, std::equal_to<_object*>, std::hash<_object*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text.unlikely+0x2c4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::vector<pybind11::detail::function_call, std::allocator<pybind11::detail::function_call> >::~vector() [clone .lto_priv.0] » :
<artificial>:(.text.unlikely+0x32f) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text.unlikely+0x36e) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text.unlikely+0x37e) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text.unlikely+0x3bd) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text.unlikely+0x3d2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x3e7) : référence indéfinie vers « __cxa_call_terminate »
/usr/bin/ld : <artificial>:(.text.unlikely+0x3fc) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long) [clone .cold] » :
<artificial>:(.text.unlikely+0x438) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [clone .cold] » :
<artificial>:(.text.unlikely+0x444) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x45a) : référence indéfinie vers « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pybind11::detail::unchecked_mutable_reference<unsigned long, 2l> pybind11::array::mutable_unchecked<unsigned long, 2l>() & [clone .cold] » :
<artificial>:(.text.unlikely+0x476) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4fa) : référence indéfinie vers « std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x529) : référence indéfinie vers « std::domain_error::~domain_error() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x533) : référence indéfinie vers « typeinfo for std::domain_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x538) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x542) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x554) : référence indéfinie vers « std::domain_error::domain_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x55b) : référence indéfinie vers « std::domain_error::~domain_error() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x562) : référence indéfinie vers « typeinfo for std::domain_error »
/usr/bin/ld : <artificial>:(.text.unlikely+0x56a) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5aa) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5c2) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pad_and_pack_S_general(std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > const&) [clone .cold] » :
<artificial>:(.text.unlikely+0x5f5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pad_and_pack_F_general(std::unordered_map<std::vector<unsigned long, std::allocator<unsigned long> >, int, VectorHash, std::equal_to<std::vector<unsigned long, std::allocator<unsigned long> > >, std::allocator<std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int> > > const&) [clone .cold] » :
<artificial>:(.text.unlikely+0x623) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long) [clone .cold] » :
<artificial>:(.text.unlikely+0x648) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void std::vector<pybind11::handle, std::allocator<pybind11::handle> >::_M_realloc_append<pybind11::handle>(pybind11::handle&&) [clone .cold] » :
<artificial>:(.text.unlikely+0x664) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::__detail::_Map_base<std::vector<unsigned long, std::allocator<unsigned long> >, std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int>, std::allocator<std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int> >, std::__detail::_Select1st, std::equal_to<std::vector<unsigned long, std::allocator<unsigned long> > >, VectorHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::vector<unsigned long, std::allocator<unsigned long> > const&) [clone .cold] » :
<artificial>:(.text.unlikely+0x669) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x676) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x67b) : référence indéfinie vers « __cxa_rethrow »
/usr/bin/ld : <artificial>:(.text.unlikely+0x694) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6a1) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6b1) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, long, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#2}> >(__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, long, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#2}>) [clone .cold] » :
<artificial>:(.text.unlikely+0x6d3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6f5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x717) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x739) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, long, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#4}> >(__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, long, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#4}>) [clone .cold] » :
<artificial>:(.text.unlikely+0x75b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text.unlikely+0x77d) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « void SimplexTree::insert_it<false, __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > > >(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, SimplexTree::node*, unsigned long) [clone .cold] » :
<artificial>:(.text.unlikely+0x7f2) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7fe) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « m_sequence_to_py_list(std::vector<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> >, std::allocator<std::variant<SimplexTree::node*, std::pair<SimplexTree::node*, SimplexTree::node*> > > > const&, SimplexTree const&) [clone .cold] » :
<artificial>:(.text.unlikely+0x86a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x893) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x8d6) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x8f0) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x96f) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x990) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x9a0) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa11) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa4d) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa59) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa65) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « _Min_buffered(MorseSequence&, pybind11::array_t<unsigned long, 16> const&, pybind11::array_t<unsigned long, 16> const&) [clone .cold] » :
<artificial>:(.text.unlikely+0xb86) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbba) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbea) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbf1) : référence indéfinie vers « std::__throw_bad_cast() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc02) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc12) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc41) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc50) : référence indéfinie vers « std::__throw_bad_cast() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc5c) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « pybind11::detail::accessor<pybind11::detail::accessor_policies::str_attr>::get_cache() const [clone .cold] » :
<artificial>:(.text.unlikely+0xc66) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc87) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc92) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > >::~vector() » :
<artificial>:(.text.unlikely+0x42) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<SimplexTree::node*, std::pair<SimplexTree::node* const, int>, std::allocator<std::pair<SimplexTree::node* const, int> >, std::__detail::_Select1st, std::equal_to<SimplexTree::node*>, std::hash<SimplexTree::node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable() » :
<artificial>:(.text.unlikely+0xa3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<std::vector<unsigned long, std::allocator<unsigned long> >, std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int>, std::allocator<std::pair<std::vector<unsigned long, std::allocator<unsigned long> > const, int> >, std::__detail::_Select1st, std::equal_to<std::vector<unsigned long, std::allocator<unsigned long> > >, VectorHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() » :
<artificial>:(.text.unlikely+0x11e) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::_Hashtable<_object*, _object*, std::allocator<_object*>, std::__detail::_Identity, std::equal_to<_object*>, std::hash<_object*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [clone .lto_priv.0] » :
<artificial>:(.text.unlikely+0x303) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « std::vector<pybind11::detail::function_call, std::allocator<pybind11::detail::function_call> >::~vector() [clone .lto_priv.0] » :
<artificial>:(.text.unlikely+0x422) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « main » :
<artificial>:(.text.startup+0x23) : référence indéfinie vers « PyConfig_InitPythonConfig »
/usr/bin/ld : <artificial>:(.text.startup+0x3c) : référence indéfinie vers « Py_IsInitialized »
/usr/bin/ld : <artificial>:(.text.startup+0x5e) : référence indéfinie vers « PyConfig_SetBytesArgv »
/usr/bin/ld : <artificial>:(.text.startup+0x87) : référence indéfinie vers « PyStatus_Exception »
/usr/bin/ld : <artificial>:(.text.startup+0xa2) : référence indéfinie vers « Py_InitializeFromConfig »
/usr/bin/ld : <artificial>:(.text.startup+0xcb) : référence indéfinie vers « PyStatus_Exception »
/usr/bin/ld : <artificial>:(.text.startup+0xe5) : référence indéfinie vers « PyRun_SimpleStringFlags »
/usr/bin/ld : <artificial>:(.text.startup+0xf1) : référence indéfinie vers « PyConfig_Clear »
/usr/bin/ld : <artificial>:(.text.startup+0xfb) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x152) : référence indéfinie vers « std::cout »
/usr/bin/ld : <artificial>:(.text.startup+0x166) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x16d) : référence indéfinie vers « std::cout »
/usr/bin/ld : <artificial>:(.text.startup+0x175) : référence indéfinie vers « std::ostream::operator<<(int) »
/usr/bin/ld : <artificial>:(.text.startup+0x18c) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x197) : référence indéfinie vers « std::ostream::operator<<(int) »
/usr/bin/ld : <artificial>:(.text.startup+0x1ab) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1c7) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x291) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x792) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x7d2) : référence indéfinie vers « MorseSequence::MorseSequence(SimplexTree const&) »
/usr/bin/ld : <artificial>:(.text.startup+0x7ef) : référence indéfinie vers « MorseSequence::simplices(std::optional<int>) const »
/usr/bin/ld : <artificial>:(.text.startup+0x8e8) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0xcf0) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0xd1f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0xe46) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0xecd) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x134b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text.startup+0x188e) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « main » :
<artificial>:(.text.startup+0x1990) : référence indéfinie vers « std::chrono::_V2::system_clock::now() »
/usr/bin/ld : <artificial>:(.text.startup+0x19a3) : référence indéfinie vers « MorseSequence::get_simplex_tree() »
/usr/bin/ld : <artificial>:(.text.startup+0x1ae8) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1b19) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1b89) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1bc2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1cda) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1d1f) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1d95) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x1dcb) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x21aa) : référence indéfinie vers « std::__throw_bad_array_new_length() »
/usr/bin/ld : <artificial>:(.text.startup+0x21b1) : référence indéfinie vers « std::cerr »
/usr/bin/ld : <artificial>:(.text.startup+0x21c5) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x21d4) : référence indéfinie vers « std::ostream& std::ostream::_M_insert<long>(long) »
/usr/bin/ld : <artificial>:(.text.startup+0x223c) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x225f) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2303) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x233d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x23d8) : référence indéfinie vers « std::cerr »
/usr/bin/ld : <artificial>:(.text.startup+0x23fa) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2417) : référence indéfinie vers « std::ostream& std::ostream::_M_insert<long>(long) »
/usr/bin/ld : <artificial>:(.text.startup+0x245b) : référence indéfinie vers « std::ostream::put(char) »
/usr/bin/ld : <artificial>:(.text.startup+0x2471) : référence indéfinie vers « std::ostream::flush() »
/usr/bin/ld : <artificial>:(.text.startup+0x24ab) : référence indéfinie vers « MorseSequence::Max(std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > const&, std::unordered_map<SimplexTree::node*, int, std::hash<SimplexTree::node*>, std::equal_to<SimplexTree::node*>, std::allocator<std::pair<SimplexTree::node* const, int> > > const&) »
/usr/bin/ld : <artificial>:(.text.startup+0x250b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x252a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x257f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x259a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x259f) : référence indéfinie vers « std::chrono::_V2::system_clock::now() »
/usr/bin/ld : <artificial>:(.text.startup+0x25a6) : référence indéfinie vers « std::cout »
/usr/bin/ld : <artificial>:(.text.startup+0x25ba) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x25ce) : référence indéfinie vers « std::cout »
/usr/bin/ld : <artificial>:(.text.startup+0x25e0) : référence indéfinie vers « std::ostream& std::ostream::_M_insert<double>(double) »
/usr/bin/ld : <artificial>:(.text.startup+0x25f4) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2611) : référence indéfinie vers « MorseSequence::simplices(std::optional<int>) const »
/usr/bin/ld : <artificial>:(.text.startup+0x2727) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2acf) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2b09) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2b1d) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text.startup+0x2baa) : référence indéfinie vers « std::ctype<char>::_M_widen_init() const »
/usr/bin/ld : <artificial>:(.text.startup+0x2bca) : référence indéfinie vers « std::ostream::put(char) »
/usr/bin/ld : <artificial>:(.text.startup+0x2bd2) : référence indéfinie vers « std::ostream::flush() »
/usr/bin/ld : <artificial>:(.text.startup+0x2c41) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2d92) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x2e25) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x3372) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x3437) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x34a4) : référence indéfinie vers « std::chrono::_V2::system_clock::now() »
/usr/bin/ld : <artificial>:(.text.startup+0x34d1) : référence indéfinie vers « std::chrono::_V2::system_clock::now() »
/usr/bin/ld : <artificial>:(.text.startup+0x34d8) : référence indéfinie vers « std::cout »
/usr/bin/ld : <artificial>:(.text.startup+0x34f0) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x3508) : référence indéfinie vers « std::cout »
/usr/bin/ld : <artificial>:(.text.startup+0x351d) : référence indéfinie vers « std::ostream& std::ostream::_M_insert<double>(double) »
/usr/bin/ld : <artificial>:(.text.startup+0x3531) : référence indéfinie vers « std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) »
/usr/bin/ld : <artificial>:(.text.startup+0x358a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x3597) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x35f2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x361a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x363a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:<artificial>:(.text.startup+0x3678) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o : dans la fonction « main » :
<artificial>:(.text.startup+0x4587) : référence indéfinie vers « std::ctype<char>::_M_widen_init() const »
/usr/bin/ld : <artificial>:(.text.startup+0x4826) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x48c2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x495a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4984) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x49e3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4a21) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4a59) : référence indéfinie vers « PyConfig_Clear »
/usr/bin/ld : <artificial>:(.text.startup+0x4a63) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.startup+0x4a8c) : référence indéfinie vers « PyStatus_IsError »
/usr/bin/ld : <artificial>:(.text.startup+0x4aa6) : référence indéfinie vers « std::runtime_error::runtime_error(char const*) »
/usr/bin/ld : <artificial>:(.text.startup+0x4aad) : référence indéfinie vers « std::runtime_error::~runtime_error() »
/usr/bin/ld : <artificial>:(.text.startup+0x4ab4) : référence indéfinie vers « typeinfo for std::runtime_error »
/usr/bin/ld : <artificial>:(.text.startup+0x4abc) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.startup+0x4ae0) : référence indéfinie vers « PyConfig_Clear »
/usr/bin/ld : <artificial>:(.text.startup+0x4aea) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.startup+0x4b11) : référence indéfinie vers « PyStatus_IsError »
/usr/bin/ld : <artificial>:(.text.startup+0x4b2b) : référence indéfinie vers « std::runtime_error::runtime_error(char const*) »
/usr/bin/ld : <artificial>:(.text.startup+0x4e90) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4ea0) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4eb7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4ec8) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.startup+0x4f34) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4f87) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4fa7) : référence indéfinie vers « std::__throw_bad_cast() »
/usr/bin/ld : <artificial>:(.text.startup+0x4fd2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x4fdc) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x5085) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x50ae) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.startup+0x50c1) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.startup+0x50dc) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x50f7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x511e) : référence indéfinie vers « std::__throw_bad_cast() »
/usr/bin/ld : <artificial>:(.text.startup+0x512f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x5171) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x518c) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.startup+0x51a0) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.startup+0x51f9) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x520d) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.startup+0x5245) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x5260) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.startup+0x52a6) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans1.ltrans.o:(.data.rel.ro+0x20) : référence indéfinie vers « std::runtime_error::what() const »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.0] » :
<artificial>:(.text+0xca) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0xf9) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Hashtable<std::type_index, std::pair<std::type_index const, pybind11::detail::type_info*>, std::allocator<std::pair<std::type_index const, pybind11::detail::type_info*> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, std::type_index const&, unsigned long) const [clone .isra.0] » :
<artificial>:(.text+0x199) : référence indéfinie vers « std::_Hash_bytes(void const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#3}> >(__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#3}>) [clone .lto_priv.0] » :
<artificial>:(.text+0x2d1) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x332) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x437) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x488) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4d7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o:<artificial>:(.text+0x532) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « SimplexTree::full_simplex(SimplexTree::node*, unsigned long) const [clone .constprop.0] » :
<artificial>:(.text+0x1806) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x181c) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x190e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1ae8) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1b93) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o:<artificial>:(.text+0x1c33) : encore plus de références indéfinies suivent vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « SimplexTree::full_simplex(SimplexTree::node*, unsigned long) const [clone .constprop.0] » :
<artificial>:(.text+0x1d31) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x1d49) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2029) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x20be) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x215a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x21e9) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x227a) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x22db) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x230e) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x233b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x236b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x23e8) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o:<artificial>:(.text+0x23fa) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « SimplexTree::full_simplex(SimplexTree::node*, unsigned long) const [clone .constprop.0] » :
<artificial>:(.text+0x2756) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x27ca) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2815) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2896) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x292c) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x29c3) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2a62) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2afe) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o:<artificial>:(.text+0x2b95) : encore plus de références indéfinies suivent vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « SimplexTree::full_simplex(SimplexTree::node*, unsigned long) const [clone .constprop.0] » :
<artificial>:(.text+0x2d8c) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2dc2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2df0) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2e23) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x2e51) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o:<artificial>:(.text+0x2e87) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « SimplexTree::full_simplex(SimplexTree::node*, unsigned long) const [clone .constprop.0] » :
<artificial>:(.text+0x30b8) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3150) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x31ed) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x328b) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3324) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x33b7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x345c) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x34fa) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3568) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x35a3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x35ca) : référence indéfinie vers « std::__throw_bad_array_new_length() »
/usr/bin/ld : <artificial>:(.text+0x3619) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x36a0) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x36e7) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x373d) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text+0x3770) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x37cf) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::type_info::hash_code() const [clone .isra.0] » :
<artificial>:(.text+0x39e0) : référence indéfinie vers « std::_Hash_bytes(void const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Fwd_list_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_after(std::_Fwd_list_node_base*, std::_Fwd_list_node_base*) [clone .constprop.0] [clone .isra.0] » :
<artificial>:(.text+0x3b2d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x3b3a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > >, std::_Select1st<std::pair<unsigned long const, std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > > >*) [clone .isra.0] » :
<artificial>:(.text+0x4088) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4096) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x40b4) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o:<artificial>:(.text+0x40c1) : encore plus de références indéfinies suivent vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool) [clone .isra.0] » :
<artificial>:(.text+0x4458) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x487e) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Hashtable<void const*, std::pair<void const* const, pybind11::detail::instance*>, std::allocator<std::pair<void const* const, pybind11::detail::instance*> >, std::__detail::_Select1st, std::equal_to<void const*>, std::hash<void const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::erase(std::__detail::_Node_const_iterator<std::pair<void const* const, pybind11::detail::instance*>, false, false>) [clone .isra.0] » :
<artificial>:(.text+0x49e6) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Hashtable<_typeobject*, std::pair<_typeobject* const, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> > >, std::allocator<std::pair<_typeobject* const, std::vector<pybind11::detail::type_info*, std::allocator<pybind11::detail::type_info*> > > >, std::__detail::_Select1st, std::equal_to<_typeobject*>, std::hash<_typeobject*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_erase(std::integral_constant<bool, true>, _typeobject* const&) [clone .isra.0] » :
<artificial>:(.text+0x4b20) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4b2d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Hashtable<std::type_index, std::pair<std::type_index const, pybind11::detail::type_info*>, std::allocator<std::pair<std::type_index const, pybind11::detail::type_info*> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_erase(std::integral_constant<bool, true>, std::type_index const&) [clone .isra.0] » :
<artificial>:(.text+0x4c26) : référence indéfinie vers « std::_Hash_bytes(void const*, unsigned long, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4c7d) : référence indéfinie vers « std::_Hash_bytes(void const*, unsigned long, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4ca3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4cfc) : référence indéfinie vers « std::_Hash_bytes(void const*, unsigned long, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x4d5e) : référence indéfinie vers « std::_Hash_bytes(void const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > >, std::_Select1st<std::pair<unsigned long const, std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<SimplexTree::node*, std::allocator<SimplexTree::node*> > > > >::_M_get_insert_unique_pos(unsigned long const&) [clone .isra.0] » :
<artificial>:(.text+0x4ecb) : référence indéfinie vers « std::_Rb_tree_decrement(std::_Rb_tree_node_base*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::cpp_function::make_function_record() [clone .isra.0] » :
<artificial>:(.text+0x50ca) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .isra.0] » :
<artificial>:(.text+0x519d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::handle::dec_ref() const & [clone .isra.0] » :
<artificial>:(.text+0x51d0) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::type_caster<int, void>::load(pybind11::handle, bool) » :
<artificial>:(.text+0x524a) : référence indéfinie vers « PyFloat_Type »
/usr/bin/ld : <artificial>:(.text+0x5257) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x5275) : référence indéfinie vers « PyLong_AsLong »
/usr/bin/ld : <artificial>:(.text+0x528a) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : <artificial>:(.text+0x52bc) : référence indéfinie vers « PyIndex_Check »
/usr/bin/ld : <artificial>:(.text+0x52c9) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x52d8) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : <artificial>:(.text+0x52e5) : référence indéfinie vers « PyNumber_Check »
/usr/bin/ld : <artificial>:(.text+0x52f1) : référence indéfinie vers « PyNumber_Long »
/usr/bin/ld : <artificial>:(.text+0x52fb) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::traverse_offset_bases(void*, pybind11::detail::type_info const*, pybind11::detail::instance*, bool (*)(void*, pybind11::detail::instance*)) [clone .constprop.0] » :
<artificial>:(.text+0x5394) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x53a1) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::get_type_info(std::type_index const&, bool) [clone .constprop.0] » :
<artificial>:(.text+0x5b4b) : référence indéfinie vers « __cxa_guard_acquire »
/usr/bin/ld : <artificial>:(.text+0x5b5d) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x5b93) : référence indéfinie vers « __cxa_guard_release »
/usr/bin/ld : <artificial>:(.text+0x5bd5) : référence indéfinie vers « std::_Hash_bytes(void const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::array_t<unsigned long, 16>::array_t(pybind11::detail::any_container<long>, unsigned long const*, pybind11::handle) [clone .constprop.0] » :
<artificial>:(.text+0x5cd4) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x61dc) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x621f) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x6231) : référence indéfinie vers « PyEval_SaveThread »
/usr/bin/ld : <artificial>:(.text+0x6238) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : <artificial>:(.text+0x623f) : référence indéfinie vers « std::__once_call »
/usr/bin/ld : <artificial>:(.text+0x6273) : référence indéfinie vers « __once_proxy »
/usr/bin/ld : <artificial>:(.text+0x6296) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : <artificial>:(.text+0x62ff) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x6311) : référence indéfinie vers « PyEval_SaveThread »
/usr/bin/ld : <artificial>:(.text+0x6318) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : <artificial>:(.text+0x631f) : référence indéfinie vers « std::__once_call »
/usr/bin/ld : <artificial>:(.text+0x6353) : référence indéfinie vers « __once_proxy »
/usr/bin/ld : <artificial>:(.text+0x6376) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : <artificial>:(.text+0x637d) : référence indéfinie vers « std::__once_call »
/usr/bin/ld : <artificial>:(.text+0x63d0) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x63e1) : référence indéfinie vers « PyEval_RestoreThread »
/usr/bin/ld : <artificial>:(.text+0x6408) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x6411) : référence indéfinie vers « PyEval_RestoreThread »
/usr/bin/ld : <artificial>:(.text+0x648f) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x66b5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x68c8) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x68e7) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x68f9) : référence indéfinie vers « PyEval_SaveThread »
/usr/bin/ld : <artificial>:(.text+0x6900) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : <artificial>:(.text+0x6907) : référence indéfinie vers « std::__once_call »
/usr/bin/ld : <artificial>:(.text+0x6944) : référence indéfinie vers « __once_proxy »
/usr/bin/ld : <artificial>:(.text+0x699a) : référence indéfinie vers « PyThread_tss_set »
/usr/bin/ld : <artificial>:(.text+0x69e3) : référence indéfinie vers « PyEval_RestoreThread »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::buffer::request(bool) const [clone .constprop.0] » :
<artificial>:(.text+0x6a92) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6ab3) : référence indéfinie vers « PyObject_GetBuffer »
/usr/bin/ld : <artificial>:(.text+0x6b0c) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6b81) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6edb) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6ef9) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6fc0) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x6ff7) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x73da) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x74f2) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text+0x753e) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x755b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7565) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::cpp_function::initialize_generic(std::unique_ptr<pybind11::detail::function_record, pybind11::cpp_function::InitializingFunctionRecordDeleter>&&, char const*, std::type_info const* const*, unsigned long) [clone .constprop.0] » :
<artificial>:(.text+0x75f8) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7622) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7643) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x76ed) : référence indéfinie vers « PyObject_Repr »
/usr/bin/ld : <artificial>:(.text+0x78a6) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x799c) : référence indéfinie vers « PyExc_FutureWarning »
/usr/bin/ld : <artificial>:(.text+0x79ae) : référence indéfinie vers « PyErr_WarnEx »
/usr/bin/ld : <artificial>:(.text+0x7b6f) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7dbe) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x7ddd) : référence indéfinie vers « PyInstanceMethod_Type »
/usr/bin/ld : <artificial>:(.text+0x7dea) : référence indéfinie vers « PyCFunction_Type »
/usr/bin/ld : <artificial>:(.text+0x7e00) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x7e13) : référence indéfinie vers « _Py_NoneStruct »
/usr/bin/ld : <artificial>:(.text+0x7f71) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8008) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x807b) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x80b3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8185) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x833d) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x83e7) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x840a) : référence indéfinie vers « PyCapsule_Type »
/usr/bin/ld : <artificial>:(.text+0x8435) : référence indéfinie vers « PyCapsule_GetName »
/usr/bin/ld : <artificial>:(.text+0x846b) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x84de) : référence indéfinie vers « PyCapsule_New »
/usr/bin/ld : <artificial>:(.text+0x8501) : référence indéfinie vers « PyCapsule_SetContext »
/usr/bin/ld : <artificial>:(.text+0x8521) : référence indéfinie vers « PyObject_HasAttrString »
/usr/bin/ld : <artificial>:(.text+0x853d) : référence indéfinie vers « PyObject_HasAttrString »
/usr/bin/ld : <artificial>:(.text+0x8559) : référence indéfinie vers « PyCMethod_New »
/usr/bin/ld : <artificial>:(.text+0x874c) : référence indéfinie vers « PyInstanceMethod_New »
/usr/bin/ld : <artificial>:(.text+0x876f) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : <artificial>:(.text+0x8c6b) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8cc3) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x8cd2) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text+0x8cda) : référence indéfinie vers « PyCapsule_GetName »
/usr/bin/ld : <artificial>:(.text+0x8cf1) : référence indéfinie vers « PyCapsule_GetPointer »
/usr/bin/ld : <artificial>:(.text+0x8e36) : référence indéfinie vers « PyCapsule_SetPointer »
/usr/bin/ld : <artificial>:(.text+0x8e74) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x8e87) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x8ecf) : référence indéfinie vers « PyObject_GetAttrString »
/usr/bin/ld : <artificial>:(.text+0x903d) : référence indéfinie vers « PyObject_Str »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::setattr(pybind11::handle, char const*, pybind11::handle) [clone .constprop.0] » :
<artificial>:(.text+0x9222) : référence indéfinie vers « PyObject_SetAttrString »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::import_numpy_core_submodule(char const*) [clone .constprop.0] » :
<artificial>:(.text+0x925c) : référence indéfinie vers « PyImport_ImportModule »
/usr/bin/ld : <artificial>:(.text+0x92d1) : référence indéfinie vers « PyObject_Str »
/usr/bin/ld : <artificial>:(.text+0x9305) : référence indéfinie vers « PyImport_ImportModule »
/usr/bin/ld : <artificial>:(.text+0x9340) : référence indéfinie vers « PyGILState_Check »
/usr/bin/ld : <artificial>:(.text+0x9373) : référence indéfinie vers « PyTuple_New »
/usr/bin/ld : <artificial>:(.text+0x93ab) : référence indéfinie vers « PyLong_Type »
/usr/bin/ld : <artificial>:(.text+0x93b8) : référence indéfinie vers « PyBool_Type »
/usr/bin/ld : <artificial>:(.text+0x93f8) : référence indéfinie vers « PyObject_CallObject »
/usr/bin/ld : <artificial>:(.text+0x9458) : référence indéfinie vers « PyFloat_Type »
/usr/bin/ld : <artificial>:(.text+0x9466) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x9473) : référence indéfinie vers « PyLong_AsLong »
/usr/bin/ld : <artificial>:(.text+0x948d) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : <artificial>:(.text+0x9497) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text+0x949e) : référence indéfinie vers « typeinfo for int »
/usr/bin/ld : <artificial>:(.text+0x94e9) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : <artificial>:(.text+0x94ff) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : <artificial>:(.text+0x9508) : référence indéfinie vers « PyNumber_Check »
/usr/bin/ld : <artificial>:(.text+0x9519) : référence indéfinie vers « PyNumber_Long »
/usr/bin/ld : <artificial>:(.text+0x9526) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : <artificial>:(.text+0x9615) : référence indéfinie vers « PyImport_ImportModule »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::type_caster<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, void>& pybind11::detail::load_type<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, void>(pybind11::detail::type_caster<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, void>&, pybind11::handle const&) [clone .isra.0] » :
<artificial>:(.text+0x97ad) : référence indéfinie vers « PyUnicode_AsUTF8AndSize »
/usr/bin/ld : <artificial>:(.text+0x981e) : référence indéfinie vers « PyByteArray_Type »
/usr/bin/ld : <artificial>:(.text+0x9828) : référence indéfinie vers « PyType_IsSubtype »
/usr/bin/ld : <artificial>:(.text+0x9836) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text+0x9864) : référence indéfinie vers « PyByteArray_AsString »
/usr/bin/ld : <artificial>:(.text+0x9880) : référence indéfinie vers « PyByteArray_Size »
/usr/bin/ld : <artificial>:(.text+0x98a4) : référence indéfinie vers « PyBytes_AsString »
/usr/bin/ld : <artificial>:(.text+0x98b8) : référence indéfinie vers « PyBytes_Size »
/usr/bin/ld : <artificial>:(.text+0x9901) : référence indéfinie vers « PyErr_Clear »
/usr/bin/ld : <artificial>:(.text+0x9932) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text+0x995f) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Sp_counted_deleter<pybind11::detail::error_fetch_and_normalize*, void (*)(pybind11::detail::error_fetch_and_normalize*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter() » :
<artificial>:(.text+0x1e) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::_Sp_counted_deleter<pybind11::detail::error_fetch_and_normalize*, void (*)(pybind11::detail::error_fetch_and_normalize*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() » :
<artificial>:(.text+0x2e) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::vector<unsigned long, std::allocator<unsigned long> >::_M_move_assign(std::vector<unsigned long, std::allocator<unsigned long> >&&, std::integral_constant<bool, true>) [clone .isra.0] » :
<artificial>:(.text+0xacc) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::handle::dec_ref() const & [clone .isra.0] » :
<artificial>:(.text+0x5207) : référence indéfinie vers « _Py_Dealloc »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::array_t<unsigned long, 16>::array_t(pybind11::detail::any_container<long>, unsigned long const*, pybind11::handle) [clone .constprop.0] » :
<artificial>:(.text+0x61fe) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::cpp_function::initialize_generic(std::unique_ptr<pybind11::detail::function_record, pybind11::cpp_function::InitializingFunctionRecordDeleter>&&, char const*, std::type_info const* const*, unsigned long) [clone .constprop.0] » :
<artificial>:(.text+0x87b2) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x8) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « void std::__insertion_sort<__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#4}> >(__gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__normal_iterator<std::vector<unsigned long, std::allocator<unsigned long> >*, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > > >, __gnu_cxx::__ops::_Iter_comp_iter<main::{lambda(std::vector<unsigned long, std::allocator<unsigned long> > const&, std::vector<unsigned long, std::allocator<unsigned long> > const&)#4}>) [clone .lto_priv.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x1f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « SimplexTree::full_simplex(SimplexTree::node*, unsigned long) const [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x34) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x40) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x45) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x4a) : référence indéfinie vers « __cxa_rethrow »
/usr/bin/ld : <artificial>:(.text.unlikely+0x52) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5a) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x69) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6e) : référence indéfinie vers « __cxa_rethrow »
/usr/bin/ld : <artificial>:(.text.unlikely+0x76) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7e) : référence indéfinie vers « __cxa_call_terminate »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [clone .isra.0] » :
<artificial>:(.text.unlikely+0xcf) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe8) : référence indéfinie vers « std::__throw_bad_alloc() »
/usr/bin/ld : <artificial>:(.text.unlikely+0xf1) : référence indéfinie vers « operator new(unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x15a) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1d3) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*) [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x26c) : référence indéfinie vers « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x280) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool) [clone .isra.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x28c) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « bool pybind11::detail::handle_nested_exception<std::nested_exception, 0>(std::nested_exception const&, std::__exception_ptr::exception_ptr const&) [clone .isra.0] » :
<artificial>:(.text.unlikely+0x2aa) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_addref() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x2ca) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_addref() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x2e2) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x2f1) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x306) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : <artificial>:(.text.unlikely+0x315) : référence indéfinie vers « std::__exception_ptr::exception_ptr::_M_release() »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*) [clone .isra.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x338) : référence indéfinie vers « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_cold(char*, unsigned long, char const*, unsigned long, unsigned long) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .isra.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x34c) : référence indéfinie vers « std::__throw_logic_error(char const*) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::raise_err(_object*, char const*) [clone .isra.0] » :
<artificial>:(.text.unlikely+0x38e) : référence indéfinie vers « PyErr_Occurred »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::get_type_info(std::type_index const&, bool) [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x3f5) : référence indéfinie vers « __cxa_guard_abort »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::cast_error_unable_to_convert_call_arg(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [clone .isra.0] » :
<artificial>:(.text.unlikely+0x490) : référence indéfinie vers « std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::array_t<unsigned long, 16>::array_t(pybind11::detail::any_container<long>, unsigned long const*, pybind11::handle) [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x50b) : référence indéfinie vers « std::__throw_system_error(int) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x515) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x536) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x53d) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : <artificial>:(.text.unlikely+0x571) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x581) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5a9) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5ba) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x5c1) : référence indéfinie vers « std::__throw_system_error(int) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x617) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x643) : référence indéfinie vers « std::__throw_system_error(int) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x64a) : référence indéfinie vers « std::__once_callable »
/usr/bin/ld : <artificial>:(.text.unlikely+0x651) : référence indéfinie vers « std::__once_call »
/usr/bin/ld : <artificial>:(.text.unlikely+0x67c) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x69d) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6be) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::buffer::request(bool) const [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x6e0) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x6f5) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x70a) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x73f) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x752) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x775) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x793) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7a4) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7b0) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7c6) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x7ce) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::cpp_function::initialize_generic(std::unique_ptr<pybind11::detail::function_record, pybind11::cpp_function::InitializingFunctionRecordDeleter>&&, char const*, std::type_info const* const*, unsigned long) [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x7e0) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x801) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x86c) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x943) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x964) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x987) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x9a6) : référence indéfinie vers « operator delete(void*, unsigned long) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa19) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa23) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa44) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa54) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa75) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xa96) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xaa6) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xac0) : référence indéfinie vers « __cxa_begin_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0xac5) : référence indéfinie vers « __cxa_end_catch »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb01) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb19) : référence indéfinie vers « std::__throw_out_of_range_fmt(char const*, ...) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb2a) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb36) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb42) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xb4e) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbb1) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbd2) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbdc) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xbfd) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc28) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc38) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc47) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc68) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc72) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xc93) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::setattr(pybind11::handle, char const*, pybind11::handle) [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0xcac) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xccd) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xcd8) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::import_numpy_core_submodule(char const*) [clone .constprop.0] [clone .cold] » :
<artificial>:(.text.unlikely+0xcea) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd0b) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd15) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd36) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd40) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd61) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xd9c) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xdfc) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe14) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe28) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe6e) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe78) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xe99) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xecf) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xee6) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xef5) : référence indéfinie vers « __cxa_allocate_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0xf16) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0xfd2) : référence indéfinie vers « std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x102f) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x1087) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : <artificial>:(.text.unlikely+0x10ba) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::type_caster<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, void>& pybind11::detail::load_type<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, void>(pybind11::detail::type_caster<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, void>&, pybind11::handle const&) [clone .isra.0] [clone .cold] » :
<artificial>:(.text.unlikely+0x10f0) : référence indéfinie vers « std::__throw_length_error(char const*) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x119c) : référence indéfinie vers « std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) »
/usr/bin/ld : <artificial>:(.text.unlikely+0x11f8) : référence indéfinie vers « __cxa_throw »
/usr/bin/ld : <artificial>:(.text.unlikely+0x123d) : référence indéfinie vers « __cxa_free_exception »
/usr/bin/ld : /tmp/ccBpFKp1.ltrans2.ltrans.o : dans la fonction « pybind11::detail::raise_err(_object*, char const*) [clone .isra.0] » :
<artificial>:(.text.unlikely+0x3a9) : référence indéfinie vers « PyErr_SetString »
collect2: error: ld returned 1 exit status
make: *** [<commande interne>: test_bindings] Error 1
